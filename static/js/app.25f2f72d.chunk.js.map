{"version":3,"sources":["src/persistence/DBHandler/index.tsx","src/styles/themes/ikindalikeyou.ts","src/hooks/theme.tsx","src/hooks/index.tsx","src/pages/Home/styles.ts","src/pages/Home/index.tsx","src/pages/BeenAwhile/styles.ts","src/pages/BeenAwhile/index.tsx","src/pages/AddContact/styles.ts","src/pages/AddContact/index.tsx","src/pages/Profile/styles.ts","src/pages/Profile/index.tsx","src/pages/MoreInformation/styles.ts","src/pages/MoreInformation/index.tsx","src/routes/index.tsx","App.tsx","src/services/ArcGIS/ArcGISMapWeb/arcgisweb.js","src/services/GoogleMap/GoogleMapIOS/googleios.js","src/services/GoogleMap/GoogleMapAndroid/googleandroid.js","src/assets/WorldMap/WorldMap.png"],"names":["db","dbref","tableClass","firebaseConfig","apiKey","API_KEY","authDomain","projectId","storageBucket","messagingSenderId","MESSAGE_SENDER_ID","appId","APP_ID","firebaseSnapshotToArray","snapshot","returnArr","forEach","childSnapshot","val","push","dataBody","URLSearchParams","append","basicb","base64","encode","Platform","OS","console","log","transaction","executeSql","expoSQLite","DBHandleInstance","this","recvRawRows","rowsData","rowNumber","readError","writeError","firebase","initializeApp","fdb","database","ref","fetch","method","headers","xsrfCookieName","xsrfHeaderName","body","toString","then","resp","json","auth","authToken","token_type","access_token","response","catch","error","getFirebaseFromApi","apiData","arrValues","argString","i","rowNum","j","columnNum","linearDat","trans","String","results","rowsAffected","err","Promise","resolve","reject","get","exists","length","message","_","_array","rows","personID","orderByChild","equalTo","parseInt","on","title","colors","primary","background","switcherBackground","text","tabBarActiveBackgroundColor","tabBarIconInactiveColor","inputBackground","inputTextColor","inputIconFill","inputIconNotFill","inputFocusBorderColor","ThemeContext","createContext","ThemeProvider","children","deviceTheme","Appearance","getColorScheme","useState","ikindalikeyou","theme","setTheme","persistTheme","useCallback","themeToPersist","a","async","useEffect","toggleTheme","Provider","value","AppProvider","BackgroundView","styled","SafeAreaView","ProfileButton","TouchableOpacity","HomeScreen","navigation","route","Text","onPress","navigate","name","TitleText","Image","ButtonNextTab","TabText","BeenAwhileScreen","Dimensions","width","height","params","source","MapImg","style","maxHeight","maxWidth","View","position","top","flex","alignSelf","flexDirection","padding","AddContactScreen","RowElement","DataListTable","FlatList","ProfileScreen","setRowsData","setRowNumber","AllUserRowsDB","rowsDataDB","contactstring","marginTop","key","minWidth","alignItems","justifyContent","borderWidth","fontWeight","data","keyExtractor","item","person_id","showsHorizontalScrollIndicator","renderItem","index","backgroundColor","color","first_name","been_awhile","indexProp","id","type","MapElementComponent","select","web","require","default","ios","android","MoreInformationScreen","rowData","setRowData","OneUserRowDB","rowDataDB","last_name","lat","latitude","long","longitude","communication_pref","age","first_known","interest","marginBottom","notes","StackNavigator","createStackNavigator","Routes","useContext","Navigator","initialRouteName","screenOptions","headerStyle","header","Screen","options","component","InitDBFunc","InitAllDB","App","NavigationContainer","StatusBar","React","Component","ArcGISMap","elementRef","useRef","cleanup","app","initialize","current","GoogleAppMap","props","undefined","initialRegion","latitudeDelta","longitudeDelta","region","module","exports"],"mappings":"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","file":"static/js/app.25f2f72d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Platform } from 'react-native';\r\nimport base64 from 'react-native-base64'\r\nimport Schema from './schema'\r\nimport * as expoSQLite from 'expo-sqlite';\r\n// @ts-ignore \r\nimport { API_KEY, APP_ID, MESSAGE_SENDER_ID, ISSUER, CLIENT_ID, CLIENT_SECRET, SCOPE, API_ENDPOINT } from '@env';\r\nimport firebase from 'firebase/app'\r\nimport \"firebase/database\";\r\n\r\n// NOTE: USE FIREBASE for WEB\r\n\r\n// Initialize Firebase local only\r\nconst firebaseConfig = {\r\n        apiKey: {API_KEY},\r\n        authDomain: \"rolodex-hillkevin.firebaseapp.com\",\r\n        projectId: \"rolodex-hillkevin\",\r\n        storageBucket: \"rolodex-hillkevin.appspot.com\",\r\n        messagingSenderId: {MESSAGE_SENDER_ID},\r\n        appId: {APP_ID}\r\n};\r\n\r\n// Declare general db local only\r\nvar db;\r\n\r\n// Declare web db local only\r\nvar dbref;\r\n\r\nvar tableClass;\r\n\r\n// Web db generate array of key values\r\nconst firebaseSnapshotToArray = function(snapshot) {\r\n    var returnArr = [];\r\n\r\n    snapshot.forEach(function(childSnapshot) {\r\n        if (childSnapshot.val() !== null) {\r\n            returnArr.push(childSnapshot.val());\r\n        }\r\n    });\r\n\r\n    return returnArr;\r\n};\r\n\r\nconst url_post = `${ISSUER}/v1/token`;\r\n\r\nvar resolvedToken = \"2222\";\r\nvar dataBody = new URLSearchParams();\r\ndataBody.append('grant_type', 'client_credentials');\r\ndataBody.append('scope', SCOPE);\r\ndataBody.append('access_token', resolvedToken);\r\nconst basicb = base64.encode(CLIENT_ID+\":\"+CLIENT_SECRET);\r\n\r\nconst getFirebaseFromApi = (authToken) => {  return fetch(`${API_ENDPOINT}/linearData/`, { headers: { 'Authorization': `${authToken.token_type} ${authToken.access_token}`}} )    .then((response) => response.json())    .then((json) => {      return json;    })    .catch((error) => {      console.error(error);    });};\r\n\r\n// sqlite db generate array of key values\r\nconst sqliteRowsToArray = function(recvR) {\r\n    var returnArr = [];\r\n\r\n    returnArr = recvR;\r\n \r\n    return returnArr;\r\n};\r\n\r\nclass DBHandle {\r\n\r\n    // Initialize database on new instance, NOTE: Only one instance of this class shall be created in the current .tsx file    \r\n    #openDatabase() {\r\n        if (Platform.OS === \"web\") {\r\n            console.log(\"web\");\r\n                return {\r\n                transaction: () => {\r\n                    return {\r\n                    executeSql: () => {},\r\n                    };\r\n                },\r\n            };\r\n        }\r\n        else{\r\n            const db = expoSQLite.openDatabase(\"db.db\");\r\n            return db;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        // Open database method (private) and web uses firebase RTDB, app uses sqlite\r\n        db = this.#openDatabase();\r\n        tableClass = {\r\n            recvRawRows: [],\r\n            rowsData: [],\r\n            rowNumber: 0,\r\n            readError: null,\r\n            writeError: null\r\n        }\r\n    }\r\n\r\n    InitAllDB() {\r\n        console.log(\"Initializing database...\");\r\n        if (Platform.OS === \"web\") {\r\n\r\n            firebase.initializeApp(firebaseConfig);\r\n            const fdb = firebase.database();\r\n            dbref = fdb.ref('users');\r\n\r\n        }\r\n        else {\r\n\r\n            // Filling in sample data for offline sqlite database\r\n            try {\r\n\r\n                fetch(\r\n                    url_post, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Authorization': 'Basic '+ basicb, \r\n                        'Accept': 'application/json',\r\n                        'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                    },\r\n                    // @ts-ignore \r\n                    xsrfCookieName: \"csrftoken\",\r\n                    xsrfHeaderName: 'X-CSRF-Token',\r\n                    body: dataBody.toString()\r\n                    }\r\n                )\r\n                .then(resp => resp.json())\r\n                .then(auth => {\r\n                    const authToken = auth;\r\n                    getFirebaseFromApi(authToken).then(apiData => {\r\n                        var arrValues = []; \r\n                        var argString = \"\";\r\n                        for (let i = 0; i < apiData.rowNum; i++) {\r\n                            argString += \"(\";\r\n                            for (let j = 0; j < apiData.columnNum; j++) {\r\n                                argString += ((j < (apiData.columnNum-1))? \"?,\" : \"?\");\r\n                            }\r\n                            argString += ((i < (apiData.rowNum-1))? \"),\" : \")\");\r\n                        }\r\n                        arrValues = apiData.linearDat;\r\n\r\n                        try {\r\n\r\n                            db.transaction(trans=>{\r\n\r\n                                trans.executeSql(\r\n                \r\n                                    'DROP TABLE IF EXISTS users'\r\n                                    \r\n                                )\r\n                \r\n                                trans.executeSql(\r\n                \r\n                                    'CREATE TABLE IF NOT EXISTS users (person_id INTEGER PRIMARY KEY AUTOINCREMENT, first_name TEXT, last_name TEXT, communication_pref TEXT, latitude INTEGER, longitude INTEGER, age TEXT, first_known TEXT, interest_category TEXT, interest TEXT, been_awhile BOOLEAN, notes TEXT)'\r\n                                    \r\n                                )\r\n                \r\n                                trans.executeSql(\r\n                \r\n                                    'INSERT INTO users (first_name, last_name, communication_pref, latitude, longitude, age, first_known, interest_category, interest, been_awhile, notes) values '+ String(argString), arrValues,\r\n                                    (trans, results) => {               \r\n                                        if (results.rowsAffected > 0 ) {\r\n                                            console.log('Insert success');              \r\n                                        } else {\r\n                                            console.log('Insert failed');\r\n                                        }\r\n                                    }\r\n                \r\n                                )\r\n                \r\n                                },\r\n                \r\n                                (err)=>{\r\n                \r\n                                console.log(\"Error while opening Database \",err);\r\n                \r\n                                },\r\n                \r\n                                ()=>{\r\n                \r\n                                console.log(\"Database successfully created\");\r\n                \r\n                                }\r\n                \r\n                                );\r\n                                            \r\n                            } catch (error) {\r\n\r\n                                console.log(\"Error! \",error);\r\n\r\n                            }\r\n\r\n                    })\r\n                    .catch(error => console.log(\"GET Error: \",error));\r\n                })\r\n                .catch(error => console.log(\"POST Error: \", error))\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"Error! \",error);\r\n\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Get items of firebase db or sqlite db\r\n    AllUserRowsDB() {\r\n        return new Promise((resolve,reject) => {\r\n            var returnArr = [];\r\n            if (Platform.OS === \"web\") {\r\n\r\n            try {\r\n                dbref.get().then((snapshot) => {\r\n                // On success parse data\r\n                if (snapshot.exists()) {\r\n                \r\n                    returnArr = firebaseSnapshotToArray(snapshot);\r\n    \r\n                    if (returnArr !== null && returnArr.length !== 0) {\r\n                        tableClass.rowNumber = returnArr.length;\r\n                    }\r\n\r\n                    resolve(returnArr);\r\n    \r\n                }\r\n                else {\r\n                    // snapshot doesn't exist\r\n                    reject(0);\r\n                }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    reject(0);\r\n                });\r\n            } catch (error) {\r\n                tableClass.readError = error.message;\r\n                reject(0);\r\n            }\r\n            }\r\n            else {\r\n            try {\r\n    \r\n                db.transaction(trans=>{\r\n    \r\n                    trans.executeSql(\r\n    \r\n                        'SELECT * FROM users ORDER BY ROWID ASC',\r\n                        [],\r\n                        (_, { rows: { _array } })  => tableClass.recvRawRows = _array,\r\n    \r\n                    )\r\n    \r\n                    },\r\n    \r\n                    (err)=>{\r\n    \r\n                    console.log(\"Error while opening Database \", err);\r\n                    reject(0);\r\n    \r\n                    },\r\n    \r\n                    ()=>{\r\n    \r\n                    console.log(\"Database successfully retrieved\");\r\n                    // On success parse data\r\n                    if (tableClass.recvRawRows !== null && tableClass.recvRawRows.length !== 0) {\r\n                        returnArr = sqliteRowsToArray(tableClass.recvRawRows);\r\n                        tableClass.rowNumber = tableClass.recvRawRows.length;\r\n                    }\r\n    \r\n                    resolve(returnArr);\r\n    \r\n                    }\r\n    \r\n                );\r\n    \r\n            } catch (error) {\r\n                tableClass.readError = error.message;\r\n                reject(0);\r\n            }\r\n            }\r\n    \r\n        });\r\n    }\r\n\r\n    // get on users data based on person_id\r\n    OneUserRowDB(personID) {\r\n        return new Promise((resolve,reject) => {\r\n            var returnArr = [];\r\n            if (Platform.OS === \"web\") {\r\n\r\n            try {\r\n                dbref.orderByChild('person_id').equalTo(parseInt(personID)).on('value', (snapshot) => {\r\n                // On success parse data\r\n                if (snapshot.exists()) {\r\n                    \r\n                    returnArr = firebaseSnapshotToArray(snapshot);\r\n    \r\n                    if (returnArr !== null && returnArr.length !== 0) {\r\n                        tableClass.rowNumber = returnArr.length;\r\n                    }\r\n\r\n                    resolve(returnArr);\r\n    \r\n                }\r\n                else {\r\n                    // snapshot doesn't exist\r\n                    reject(0);\r\n                }\r\n                });\r\n            } catch (error) {\r\n                tableClass.readError = error.message;\r\n                reject(0);\r\n            }\r\n            }\r\n            else {\r\n            try {\r\n                db.transaction(trans=>{\r\n    \r\n                    trans.executeSql(\r\n    \r\n                        'SELECT * FROM users WHERE person_id=?',\r\n                        [personID],\r\n                        (_, { rows: { _array } })  => tableClass.recvRawRows = _array,\r\n    \r\n                    )\r\n    \r\n                    },\r\n    \r\n                    (err)=>{\r\n    \r\n                    console.log(\"Error while reading id \", err);\r\n                    reject(0);\r\n    \r\n                    },\r\n    \r\n                    ()=>{\r\n    \r\n                    console.log(\"Database successfully retrieved\");\r\n                    // On success parse data\r\n                    if (tableClass.recvRawRows !== null && tableClass.recvRawRows.length !== 0) {\r\n                        returnArr = sqliteRowsToArray(tableClass.recvRawRows);\r\n                        tableClass.rowNumber = tableClass.recvRawRows.length;\r\n                    }\r\n    \r\n                    resolve(returnArr);\r\n    \r\n                    }\r\n    \r\n                );\r\n    \r\n            } catch (error) {\r\n                tableClass.readError = error.message;\r\n                reject(0);\r\n            }\r\n            }\r\n    \r\n        });\r\n    }\r\n}\r\n\r\nconst DBHandleInstance = new DBHandle();\r\n\r\nexport default DBHandleInstance","export default {\r\n  title: 'ikindalikeyou',\r\n\r\n  colors: {\r\n    primary: '#EEAF55',\r\n\r\n    background: '#A0F45B',\r\n    switcherBackground: '#d6d6d6',\r\n    text: '#0d0d0d',\r\n\r\n    tabBarActiveBackgroundColor: '#ebebeb',\r\n    tabBarIconInactiveColor: '#2c2c2c',\r\n\r\n    inputBackground: '#c6c6c6',\r\n    inputTextColor: '#0d0d0d',\r\n    inputIconFill: '#000000',\r\n    inputIconNotFill: '#666666',\r\n    inputFocusBorderColor: '#3a3836',\r\n  },\r\n}\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\n\r\nimport { Appearance } from 'react-native'\r\nimport { ThemeProvider as StyledProvider } from 'styled-components'\r\nimport ikindalikeyou from '../styles/themes/ikindalikeyou'\r\n\r\ninterface ThemeContextData {\r\n  toggleTheme(): void\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextData>({} as ThemeContextData)\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => {\r\n  const deviceTheme = Appearance.getColorScheme()\r\n  const [theme, setTheme] = useState(ikindalikeyou)\r\n\r\n\r\n  const persistTheme = useCallback(async themeToPersist => {\r\n    setTheme(ikindalikeyou)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    persistTheme(deviceTheme)\r\n  }, [deviceTheme, persistTheme])\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    persistTheme('ikindalikeyou')\r\n  }, [theme.title, persistTheme])\r\n\r\n  return (\r\n    <StyledProvider theme={theme}>\r\n      <ThemeContext.Provider value={{ toggleTheme }}>\r\n        {children}\r\n      </ThemeContext.Provider>\r\n    </StyledProvider>\r\n  )\r\n}\r\n\r\nfunction useTheme(): ThemeContextData {\r\n  const context = useContext(ThemeContext)\r\n\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport { ThemeProvider, useTheme }\r\n","import React from 'react'\r\n\r\nimport { ThemeProvider } from './theme'\r\n\r\nconst AppProvider: React.FC = ({ children }: any) => (\r\n  <ThemeProvider>{children}</ThemeProvider>\r\n)\r\n\r\nexport default AppProvider\r\n","import styled from 'styled-components/native'\r\n\r\n/*export const Container = styled.SafeAreaView`\r\n  background: ${props => props.theme.colors.background};\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n*/\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const ProfileButton = styled.TouchableOpacity`\r\n    alignItems: center;\r\n    background-color: #DDDDDD;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n`","import React from 'react'\r\nimport { Text } from 'react-native'\r\n\r\nimport {\r\n    BackgroundView,\r\n    ProfileButton,\r\n} from './styles'\r\n\r\nconst HomeScreen = ({navigation, route}) => {\r\n    return (\r\n        <BackgroundView>\r\n            <Text>Welcome to Rolodex</Text>\r\n            <ProfileButton onPress={() => navigation.navigate('Profile', {name: 'Kevin'} )}>\r\n                <Text>Go to Kevin's profile</Text>\r\n            </ProfileButton>\r\n        </BackgroundView>\r\n    )\r\n}\r\n\r\nexport default HomeScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { Platform, View, Dimensions } from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nconst BeenAwhileScreen = ({navigation, route}) => {\r\n\r\n    var {\r\n      width,\r\n      height\r\n    } = Dimensions.get('window');\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>Been Awhile Since You Talked</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n           <View style={{ position: 'absolute', top: (Platform.OS === \"web\") ? -1 : height - 45, width: width, flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default BeenAwhileScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { Platform, View, Dimensions } from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nconst AddContactScreen = ({navigation, route}) => {\r\n    \r\n    var {\r\n      width,\r\n      height\r\n    } = Dimensions.get('window');\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>Add Contact</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n           <View style={{ position: 'absolute', top: (Platform.OS === \"web\") ? -1 : height - 45, width: width, flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default AddContactScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`\r\n\r\nexport const RowElement = styled.Text`\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const DataListTable = styled.FlatList`\r\n    marginTop: 0;\r\n    width: 300px;\r\n`","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { Platform, Dimensions, View, Text, TouchableOpacity } from 'react-native';\r\nimport { Icon } from 'react-native-elements';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText,\r\n    RowElement,\r\n    DataListTable,\r\n} from './styles'\r\n\r\nconst ProfileScreen = ({navigation, route}) => {\r\n\r\n  const [rowsData, setRowsData] = useState([]);\r\n  const [rowNumber, setRowNumber] = useState(0);\r\n\r\n  useEffect(() => {\r\n    DBHandleInstance.AllUserRowsDB().then((rowsDataDB) => {\r\n      if (rowsDataDB != []){\r\n        setRowsData(rowsDataDB);\r\n        setRowNumber(rowsDataDB.length);\r\n      }\r\n      else{\r\n        setRowsData([]);\r\n        setRowNumber(0);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  var contactstring = (rowNumber === 1) ? \"Contact\" : \"Contacts\";\r\n  var {\r\n    width,\r\n    height\r\n  } = Dimensions.get('window');\r\n\r\n  const handleMoreClick = (indexProp:any) => {\r\n    // Parse out id\r\n    navigation.navigate('MoreInformation', {id: indexProp});\r\n  }\r\n\r\n  // TODO: fix cut off profile name on web and missing background\r\n  const id = 0;\r\n  const { name } = route.params;\r\n  return (\r\n    <BackgroundView>\r\n      <TitleText style={{ marginTop: (Platform.OS === \"web\") ? 35 : 0}}>This is {name}'s profile</TitleText>\r\n          <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n          <RowElement key={id} style={{maxHeight: height - (height*.25) }}>\r\n          <View style={{ minWidth: width-20, alignItems: 'center', justifyContent: 'center' }}>\r\n              <View style={{ alignItems: 'center', justifyContent: 'center',  flexDirection: 'row' }}>\r\n                  <View style={{ flex: 1, borderWidth: 4  }}>\r\n                      <TitleText >You Have {rowNumber} {contactstring} </TitleText>\r\n                  </View>\r\n              </View>\r\n              \r\n              <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row' }}>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 4, height: 50 }}> \r\n                      <Text style={{ fontWeight: 'bold' }}>Name</Text>\r\n                  </View>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 4, height: 50 }}>\r\n                      <Text style={{ fontWeight: 'bold' }}>Been Awhile</Text>\r\n                  </View>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 4, height: 50 }}>\r\n                      <Text style={{ fontWeight: 'bold' }}>More...</Text>\r\n                  </View>\r\n              </View>\r\n\r\n                <DataListTable\r\n                data={rowsData}\r\n                // @ts-ignore \r\n                keyExtractor={item => item.person_id.toString()}\r\n                showsHorizontalScrollIndicator={false}\r\n                renderItem={({ item, index }) => (\r\n                // @ts-ignore\r\n                <View key={item.person_id.toString()} style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n                  borderWidth: 5, }}><Text style={{ color: 'black' }}>{item.first_name}</Text></View>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n                  borderWidth: 5, }}><Text style={{ color: 'black' }}>{item.been_awhile}</Text></View>\r\n                  <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n                  borderWidth: 5, }}>\r\n                    <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => handleMoreClick( item.person_id.toString() )} >\r\n                      <Icon  name='navicon'  type='evilicon'  color='#f5ad44'/>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                </View> )} />\r\n\r\n            </View>\r\n          </RowElement>\r\n          <View style={{ position: 'absolute', top: (Platform.OS === \"web\") ? -1 : height - 45, width: width, flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n              <TabText>Home</TabText>\r\n            </ButtonNextTab>\r\n            <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n              <TabText>Been Awhile</TabText>\r\n            </ButtonNextTab>\r\n            <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n              <TabText>Add Contact</TabText>\r\n            </ButtonNextTab>\r\n            <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n              <TabText>Profile</TabText>\r\n            </ButtonNextTab>\r\n          </View>\r\n    </BackgroundView>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default ProfileScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { Platform, View, Dimensions, Text, TouchableOpacity } from 'react-native';\r\nimport { Icon } from 'react-native-elements';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\nconst MapElementComponent = Platform.select({  \r\n  web: () => require('../../services/ArcGIS/ArcGISMapWeb/arcgisweb.js').default, \r\n  ios: () => require('../../services/GoogleMap/GoogleMapIOS/googleios.js').default,\r\n  android: () => require('../../services/GoogleMap/GoogleMapAndroid/googleandroid.js').default,\r\n})();\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nconst MoreInformationScreen = ({navigation, route}) => {\r\n    const { id } = route.params;\r\n    const [rowData, setRowData] = useState({});\r\n\r\n    useEffect(() => {\r\n      DBHandleInstance.OneUserRowDB(id).then((rowDataDB) => {\r\n \r\n        if (rowDataDB != []){\r\n          // Works with ios\r\n          setRowData(rowDataDB[0]);\r\n        }\r\n        else{\r\n          setRowData({\"latitude\": 37.78825, \"longitude\": -122});\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error while reading id \", err);\r\n      });\r\n    }, []);\r\n    \r\n    var {\r\n      width,\r\n      height\r\n    } = Dimensions.get('window');\r\n\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText style={{ flex: 1, borderWidth: 5, height: (Platform.OS === \"web\") ? 30 : 10, marginTop: (Platform.OS === \"web\") ? 50 : 0, padding: (Platform.OS === \"web\") ? 20 : 10}}>{rowData.first_name} {rowData.last_name}</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n           <MapElementComponent lat={rowData.latitude} long={rowData.longitude} />\r\n           <View key=\"1\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>First Name</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.first_name}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"2\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Last Name</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.last_name}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"3\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Communication Pref</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.communication_pref}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"4\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Age</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.age}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"5\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>First Known</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.first_known}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"6\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Interest</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.interest}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"7\" style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Been Awhile</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.been_awhile}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n          <View key=\"8\" style={{ flex: 1, marginBottom: (Platform.OS === \"web\") ? 10 : 45, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>Notes</Text></View>\r\n            <View style={{ flex: 2, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{rowData.notes}</Text></View>\r\n            <View style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#d6ff84\",\r\n            borderWidth: 5, }}>\r\n              <TouchableOpacity style={{flex: 1, alignSelf: 'stretch', flexDirection: 'row'}} onPress={ () => console.log( \"todo\" )} >\r\n                <Icon  name='pencil'  type='evilicon'  color='#f5ad44'/>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n\r\n           <View style={{ position: 'absolute', top: (Platform.OS === \"web\") ? -1 : height - 45, width: width, flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default MoreInformationScreen","import React, { useContext } from 'react'\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from '../pages/Home'\r\nimport BeenAwhileScreen from '../pages/BeenAwhile'\r\nimport AddContactScreen from '../pages/AddContact'\r\nimport ProfileScreen from '../pages/Profile'\r\nimport MoreInformationScreen from '../pages/MoreInformation'\r\n\r\nimport { ThemeContext } from 'styled-components'\r\n\r\n// Initialize page navigation\r\nconst StackNavigator = createStackNavigator();\r\n\r\nexport default function Routes() {\r\n  const { colors } = useContext(ThemeContext)\r\n  return (\r\n      <StackNavigator.Navigator\r\n      initialRouteName=\"Home\"\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        header: () => null\r\n      }}\r\n    >\r\n      <StackNavigator.Screen\r\n            options={{\r\n                title: 'Home',\r\n              }}\r\n      component={HomeScreen} name=\"Home\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'BeenAwhile',\r\n              }}       \r\n      component={BeenAwhileScreen} name=\"BeenAwhile\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'AddContact',\r\n              }}             \r\n      component={AddContactScreen} name=\"AddContact\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'Profile',\r\n              }}          \r\n      component={ProfileScreen} name=\"Profile\" />\r\n\r\n     <StackNavigator.Screen \r\n            options={{\r\n                title: 'Profile',\r\n              }}             \r\n      component={MoreInformationScreen} name=\"MoreInformation\" />\r\n    </StackNavigator.Navigator>\r\n  )\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport DBHandleInstance from './src/persistence/DBHandler'\nimport AppProvider from './src/hooks';\nimport Routes from './src/routes';\n\n// Initialize DB once\nvar InitDBFunc = DBHandleInstance.InitAllDB;\nInitDBFunc();\n\n\n\nexport default class App extends React.Component {\n  render() {\n    return (\n    <NavigationContainer>\n      <StatusBar style=\"auto\" />\n      <AppProvider>\n        <Routes />\n      </AppProvider>\n    </NavigationContainer> \n    );\n  }\n}","import React from 'react';\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Dimensions, View } from 'react-native';\r\nfunction ArcGISMap(lat, long) {\r\n    const elementRef = useRef();\r\n    var {\r\n      width,\r\n      height\r\n    } = Dimensions.get('window');\r\n  \r\n    useEffect(_ => {\r\n      let cleanup;\r\n      // lazy load the module that loads the JSAPI\r\n      // and initialize it\r\n      // TODO: use lat and long args to recenter map\r\n      import(\"./arcgiswebmap\").then(\r\n \r\n        app => cleanup = app.initialize(elementRef.current, lat, long)\r\n\r\n      );\r\n\r\n      return () => cleanup && cleanup();\r\n    }, []);\r\n  \r\n    // assign elementRef to the ref of our component\r\n    return (\r\n      <View style={{maxHeight: height - (height*.75), width: width }} ref={elementRef}>\r\n      </View>\r\n    );\r\n  }\r\n\r\nexport default ArcGISMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { View, Dimensions, Text } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        lat = 37.78825;\r\n        long = -122.4324;\r\n      }\r\n\r\n    render() {\r\n      var {\r\n        width,\r\n        height\r\n      } = Dimensions.get('window');\r\n    \r\n      if (this.props.lat === undefined){\r\n        return <Text>Waiting on Data...</Text>;\r\n      }\r\n\r\n      return (\r\n        <View>\r\n          <MapView style={{height: height - (height*.75), width: width-120}}     \r\n          initialRegion={{\r\n            latitude: 37.78825,\r\n            longitude: -122.4324,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}\r\n          region={{\r\n            latitude: this.props.lat,\r\n            longitude: this.props.long,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}\r\n         />\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { View, Dimensions, Text } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    lat = 37.78825;\r\n    long = -122.4324;\r\n  }\r\n\r\n  render() {\r\n    var {\r\n      width,\r\n      height\r\n    } = Dimensions.get('window');\r\n\r\n    if (this.props.lat === undefined){\r\n      return <Text>Waiting on Data...</Text>;\r\n    }\r\n\r\n    return (\r\n      <View>\r\n        <MapView style={{height: height - (height*.75), width: width-120}}     \r\n        initialRegion={{\r\n          latitude: 37.78825,\r\n          longitude: -122.4324,\r\n          latitudeDelta: 0.0922,\r\n          longitudeDelta: 0.0421,\r\n        }}\r\n        region={{\r\n          latitude: this.props.lat,\r\n          longitude: this.props.long,\r\n          latitudeDelta: 0.0922,\r\n          longitudeDelta: 0.0421,\r\n        }}\r\n       />\r\n      </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap","module.exports = __webpack_public_path__ + \"static/media/WorldMap.e02fb1bf.png\";"],"sourceRoot":""}