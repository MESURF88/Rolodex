{"version":3,"sources":["src/persistence/DBHandler/styles.ts","src/persistence/DBHandler/index.tsx","src/styles/themes/ikindalikeyou.ts","src/hooks/theme.tsx","src/hooks/index.tsx","src/pages/Home/styles.ts","src/pages/Home/index.tsx","src/pages/BeenAwhile/styles.ts","src/pages/BeenAwhile/index.tsx","src/pages/AddContact/styles.ts","src/pages/AddContact/index.tsx","src/pages/Profile/styles.ts","src/pages/Profile/index.tsx","src/routes/index.tsx","App.tsx","src/services/ArcGIS/ArcGISMapWeb/arcgisweb.js","src/services/GoogleMap/GoogleMapIOS/googleios.js","src/services/GoogleMap/GoogleMapAndroid/googleandroid.js","src/assets/WorldMap/WorldMap.png"],"names":["RowElement","styled","SafeAreaView","Text","TitleText","DataScroll","ScrollView","db","dbref","firebaseConfig","apiKey","API_KEY","authDomain","projectId","storageBucket","messagingSenderId","MESSAGE_SENDER_ID","appId","APP_ID","firebaseSnapshotToArray","snapshot","returnArr","forEach","childSnapshot","val","push","dataBody","URLSearchParams","append","basicb","base64","encode","tableBuild","recvR","keyIdx","i","length","View","key","style","flex","alignSelf","flexDirection","padding","backgroundColor","borderWidth","color","first_name","been_awhile","GetAllUsersTable","state","recvRawRows","rowsFormatted","rowNumber","readError","writeError","componentDidMount","a","async","Platform","OS","get","then","exists","setState","catch","err","console","log","error","message","transaction","trans","executeSql","_","_array","rows","getRows","getRowNumber","id","Dimensions","width","height","contactstring","this","maxHeight","minWidth","alignItems","justifyContent","fontWeight","React","Component","expoSQLite","DBHandleInstance","firebase","initializeApp","fdb","database","ref","fetch","method","headers","xsrfCookieName","xsrfHeaderName","body","toString","resp","json","auth","authToken","token_type","access_token","response","getFirebaseFromApi","apiData","arrValues","argString","rowNum","j","columnNum","linearDat","String","results","rowsAffected","title","colors","primary","background","switcherBackground","text","tabBarActiveBackgroundColor","tabBarIconInactiveColor","inputBackground","inputTextColor","inputIconFill","inputIconNotFill","inputFocusBorderColor","ThemeContext","createContext","ThemeProvider","children","deviceTheme","Appearance","getColorScheme","useState","ikindalikeyou","theme","setTheme","persistTheme","useCallback","themeToPersist","useEffect","toggleTheme","Provider","value","AppProvider","BackgroundView","ProfileButton","TouchableOpacity","HomeScreen","navigation","route","onPress","navigate","name","Image","ButtonNextTab","TabText","BeenAwhileScreen","params","source","MapImg","maxWidth","AddContactScreen","select","web","require","default","ios","android","GetAllUserRows","ProfileScreen","StackNavigator","createStackNavigator","Routes","useContext","Navigator","initialRouteName","screenOptions","headerStyle","header","Screen","options","component","InitDBFunc","InitAllDB","App","NavigationContainer","StatusBar","ArcGISMap","props","GoogleAppMap","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","module","exports"],"mappings":"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","file":"static/js/app.aec0cdec.chunk.js","sourcesContent":["import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #D6FF84;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const RowElement = styled.Text`\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 40px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n`\r\n\r\nexport const DataScroll = styled.ScrollView`\r\n    marginTop: 0;\r\n    width: 300px;\r\n`","import React from 'react';\r\nimport { Platform, View, Text, Dimensions, TouchableOpacity } from 'react-native';\r\nimport base64 from 'react-native-base64'\r\nimport Schema from './schema'\r\nimport * as expoSQLite from 'expo-sqlite';\r\n// @ts-ignore \r\nimport { API_KEY, APP_ID, MESSAGE_SENDER_ID, ISSUER, CLIENT_ID, CLIENT_SECRET, SCOPE, API_ENDPOINT } from '@env';\r\nimport firebase from 'firebase/app'\r\nimport \"firebase/database\";\r\n\r\n// NOTE: USE FIREBASE for WEB\r\n\r\nimport {\r\n    TitleText,\r\n    RowElement,\r\n    DataScroll,\r\n} from './styles'\r\n\r\n// Initialize Firebase local only\r\nconst firebaseConfig = {\r\n        apiKey: {API_KEY},\r\n        authDomain: \"rolodex-hillkevin.firebaseapp.com\",\r\n        projectId: \"rolodex-hillkevin\",\r\n        storageBucket: \"rolodex-hillkevin.appspot.com\",\r\n        messagingSenderId: {MESSAGE_SENDER_ID},\r\n        appId: {APP_ID}\r\n};\r\n\r\n// Declare general db local only\r\nvar db;\r\n\r\n// Declare web db local only\r\nvar dbref;\r\n\r\n// Web db generate array of key values\r\nconst firebaseSnapshotToArray = function(snapshot) {\r\n    var returnArr = [];\r\n\r\n    snapshot.forEach(function(childSnapshot) {\r\n        if (childSnapshot.val() !== null) {\r\n            returnArr.push(childSnapshot.val());\r\n        }\r\n    });\r\n\r\n    return returnArr;\r\n};\r\n\r\nconst url_post = `${ISSUER}/v1/token`;\r\n\r\nvar resolvedToken = \"2222\";\r\nvar dataBody = new URLSearchParams();\r\ndataBody.append('grant_type', 'client_credentials');\r\ndataBody.append('scope', SCOPE);\r\ndataBody.append('access_token', resolvedToken);\r\nconst basicb = base64.encode(CLIENT_ID+\":\"+CLIENT_SECRET);\r\n\r\nconst getFirebaseFromApi = (authToken) => {  return fetch(`${API_ENDPOINT}/linearData/`, { headers: { 'Authorization': `${authToken.token_type} ${authToken.access_token}`}} )    .then((response) => response.json())    .then((json) => {      return json;    })    .catch((error) => {      console.error(error);    });};\r\n\r\n// Build the Table view Element\r\nconst tableBuild = function(recvR) {\r\n    var returnArr = [];\r\n\r\n    let keyIdx = 0;\r\n    for (var i = 0; i < recvR.length; i++) {\r\n        returnArr.push(\r\n        <View key={keyIdx} style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View key={keyIdx+1} style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#F1ED70\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{recvR[i].first_name}</Text></View>\r\n            <View key={keyIdx+2} style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#F1ED70\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{recvR[i].been_awhile}</Text></View>\r\n        </View>\r\n        )\r\n        keyIdx = i + 3;\r\n    }\r\n \r\n    return returnArr;\r\n};\r\n\r\n\r\n// sqlite db generate array of key values\r\nconst sqliteRowsToArray = function(recvR) {\r\n    var returnArr = [];\r\n\r\n    returnArr = recvR;\r\n \r\n    return returnArr;\r\n};\r\n\r\nclass GetAllUsersTable extends React.Component {\r\n    state = {\r\n        recvRawRows: [],\r\n        rowsFormatted: [],\r\n        rowNumber: 0,\r\n        readError: null,\r\n        writeError: null\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n      var returnArr = [];\r\n      if (Platform.OS === \"web\") {\r\n        try {\r\n            dbref.get().then((snapshot) => {\r\n            // On success parse data\r\n            if (snapshot.exists()) {\r\n            \r\n                returnArr = firebaseSnapshotToArray(snapshot);\r\n\r\n                if (returnArr !== null && returnArr.length !== 0) {\r\n                    this.setState({ rowNumber: returnArr.length});\r\n                }\r\n\r\n                this.setState({ rowsFormatted: tableBuild(returnArr) });\r\n\r\n            }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n        } catch (error) {\r\n            this.setState({ readError: error.message });\r\n        }\r\n      }\r\n      else {\r\n        try {\r\n\r\n            db.transaction(trans=>{\r\n\r\n                trans.executeSql(\r\n\r\n                    'SELECT * FROM users ORDER BY ROWID ASC',\r\n                    [],\r\n                    (_, { rows: { _array } })  => this.setState({ recvRawRows: _array }),\r\n\r\n                )\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Error while opening Database \");\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Database successfully retrieved\");\r\n                // On success parse data\r\n                if (this.state.recvRawRows !== null && this.state.recvRawRows.length !== 0) {\r\n                    returnArr = sqliteRowsToArray(this.state.recvRawRows);\r\n                    this.setState({ rowNumber: this.state.recvRawRows.length});\r\n                }\r\n\r\n                this.setState({ rowsFormatted: tableBuild(returnArr) });\r\n\r\n                }\r\n\r\n            );\r\n\r\n        } catch (error) {\r\n            this.setState({ readError: error.message });\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    getRows= () => {\r\n        return this.state.rowsFormatted;\r\n    }\r\n\r\n    getRowNumber= () => {\r\n        return this.state.rowNumber;\r\n    }\r\n\r\n    id = 0;\r\n    render() {\r\n        var {\r\n            width,\r\n            height\r\n          } = Dimensions.get('window');\r\n        var contactstring = (this.getRowNumber() === 1) ? \"Contact\" : \"Contacts\";\r\n\r\n        return (\r\n        <RowElement key={this.id} style={{maxHeight: height - (height*.65) }}>\r\n            <View style={{ minWidth: width-20, alignItems: 'center', justifyContent: 'center' }}>\r\n                <View style={{ alignItems: 'center', justifyContent: 'center',  flexDirection: 'row' }}>\r\n                    <View style={{ flex: 1, borderWidth: 4  }}>\r\n                        <TitleText >You Have {this.getRowNumber()} {contactstring} </TitleText>\r\n                    </View>\r\n                </View>\r\n                \r\n                <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row' }}>\r\n                    <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 4, height: 70 }}> \r\n                        <Text style={{ fontWeight: 'bold' }}>Name</Text>\r\n                    </View>\r\n                    <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 4, height: 70 }}>\r\n                        <Text style={{ fontWeight: 'bold' }}>Been Awhile</Text>\r\n                    </View>\r\n                </View>\r\n                <DataScroll>\r\n                    {this.getRows()}\r\n                </DataScroll>\r\n            </View>\r\n        </RowElement>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nclass DBHandle {\r\n\r\n    // Initialize database on new instance, NOTE: Only one instance of this class shall be created in the current .tsx file    \r\n    #openDatabase() {\r\n        if (Platform.OS === \"web\") {\r\n            console.log(\"web\");\r\n                return {\r\n                transaction: () => {\r\n                    return {\r\n                    executeSql: () => {},\r\n                    };\r\n                },\r\n            };\r\n        }\r\n        else{\r\n            const db = expoSQLite.openDatabase(\"db.db\");\r\n            return db;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        // Open database method (private) and web uses firebase RTDB, app uses sqlite\r\n        db = this.#openDatabase();\r\n    }\r\n\r\n    InitAllDB() {\r\n        console.log(\"Initializing database...\");\r\n        if (Platform.OS === \"web\") {\r\n\r\n            firebase.initializeApp(firebaseConfig);\r\n            const fdb = firebase.database();\r\n            dbref = fdb.ref('users');\r\n\r\n        }\r\n        else {\r\n\r\n            // Filling in sample data for offline sqlite database\r\n            try {\r\n\r\n                fetch(\r\n                    url_post, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Authorization': 'Basic '+ basicb, \r\n                        'Accept': 'application/json',\r\n                        'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                    },\r\n                    xsrfCookieName: \"csrftoken\",\r\n                    xsrfHeaderName: 'X-CSRF-Token',\r\n                    body: dataBody.toString()\r\n                    }\r\n                )\r\n                .then(resp => resp.json())\r\n                .then(auth => {\r\n                    const authToken = auth;\r\n                    getFirebaseFromApi(authToken).then(apiData => {\r\n                        var arrValues = []; \r\n                        var argString = \"\";\r\n                        for (let i = 0; i < apiData.rowNum; i++) {\r\n                            argString += \"(\";\r\n                            for (let j = 0; j < apiData.columnNum; j++) {\r\n                                argString += ((j < (apiData.columnNum-1))? \"?,\" : \"?\");\r\n                            }\r\n                            argString += ((i < (apiData.rowNum-1))? \"),\" : \")\");\r\n                        }\r\n                        arrValues = apiData.linearDat;\r\n\r\n                        try {\r\n\r\n                            db.transaction(trans=>{\r\n\r\n                                trans.executeSql(\r\n                \r\n                                    'DROP TABLE IF EXISTS users'\r\n                                    \r\n                                )\r\n                \r\n                                trans.executeSql(\r\n                \r\n                                    'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, first_name TEXT, last_name TEXT, communication_pref TEXT, latitude INTEGER, longitude INTEGER, age TEXT, first_known TEXT, interest_category TEXT, interest TEXT, been_awhile BOOLEAN, notes TEXT)'\r\n                                    \r\n                                )\r\n                \r\n                                trans.executeSql(\r\n                \r\n                                    'INSERT INTO users (first_name, last_name, communication_pref, latitude, longitude, age, first_known, interest_category, interest, been_awhile, notes) values '+ String(argString), arrValues,\r\n                                    (trans, results) => {               \r\n                                        if (results.rowsAffected > 0 ) {\r\n                                            console.log('Insert success');              \r\n                                        } else {\r\n                                            console.log('Insert failed');\r\n                                        }\r\n                                    }\r\n                \r\n                                )\r\n                \r\n                                },\r\n                \r\n                                (err)=>{\r\n                \r\n                                console.log(\"Error while opening Database \",err);\r\n                \r\n                                },\r\n                \r\n                                ()=>{\r\n                \r\n                                console.log(\"Database successfully created\");\r\n                \r\n                                }\r\n                \r\n                                );\r\n                                            \r\n                            } catch (error) {\r\n\r\n                                console.log(\"Error! \",error);\r\n\r\n                            }\r\n\r\n                    })\r\n                    .catch(error => console.log(\"GET Error: \",error));\r\n                })\r\n                .catch(error => console.log(\"POST Error: \", error))\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"Error! \",error);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Get items of firebase db or sqlite db\r\n    GetAllUserRows() {\r\n        return GetAllUsersTable;\r\n    }\r\n}\r\n\r\nconst DBHandleInstance = new DBHandle();\r\n\r\nexport default DBHandleInstance","export default {\r\n  title: 'ikindalikeyou',\r\n\r\n  colors: {\r\n    primary: '#EEAF55',\r\n\r\n    background: '#A0F45B',\r\n    switcherBackground: '#d6d6d6',\r\n    text: '#0d0d0d',\r\n\r\n    tabBarActiveBackgroundColor: '#ebebeb',\r\n    tabBarIconInactiveColor: '#2c2c2c',\r\n\r\n    inputBackground: '#c6c6c6',\r\n    inputTextColor: '#0d0d0d',\r\n    inputIconFill: '#000000',\r\n    inputIconNotFill: '#666666',\r\n    inputFocusBorderColor: '#3a3836',\r\n  },\r\n}\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\n\r\nimport { Appearance } from 'react-native'\r\nimport { ThemeProvider as StyledProvider } from 'styled-components'\r\nimport ikindalikeyou from '../styles/themes/ikindalikeyou'\r\n\r\ninterface ThemeContextData {\r\n  toggleTheme(): void\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextData>({} as ThemeContextData)\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => {\r\n  const deviceTheme = Appearance.getColorScheme()\r\n  const [theme, setTheme] = useState(ikindalikeyou)\r\n\r\n\r\n  const persistTheme = useCallback(async themeToPersist => {\r\n    setTheme(ikindalikeyou)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    persistTheme(deviceTheme)\r\n  }, [deviceTheme, persistTheme])\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    persistTheme('ikindalikeyou')\r\n  }, [theme.title, persistTheme])\r\n\r\n  return (\r\n    <StyledProvider theme={theme}>\r\n      <ThemeContext.Provider value={{ toggleTheme }}>\r\n        {children}\r\n      </ThemeContext.Provider>\r\n    </StyledProvider>\r\n  )\r\n}\r\n\r\nfunction useTheme(): ThemeContextData {\r\n  const context = useContext(ThemeContext)\r\n\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport { ThemeProvider, useTheme }\r\n","import React from 'react'\r\n\r\nimport { ThemeProvider } from './theme'\r\n\r\nconst AppProvider: React.FC = ({ children }: any) => (\r\n  <ThemeProvider>{children}</ThemeProvider>\r\n)\r\n\r\nexport default AppProvider\r\n","import styled from 'styled-components/native'\r\n\r\n/*export const Container = styled.SafeAreaView`\r\n  background: ${props => props.theme.colors.background};\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n*/\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const ProfileButton = styled.TouchableOpacity`\r\n    alignItems: center;\r\n    background-color: #DDDDDD;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n`","import React from 'react'\r\nimport { Text } from 'react-native'\r\n\r\nimport {\r\n    BackgroundView,\r\n    ProfileButton,\r\n} from './styles'\r\n\r\nconst HomeScreen = ({navigation, route}) => {\r\n    return (\r\n        <BackgroundView>\r\n            <Text>Welcome to Rolodex</Text>\r\n            <ProfileButton onPress={() => navigation.navigate('Profile', {name: 'Kevin'} )}>\r\n                <Text>Go to Kevin's profile</Text>\r\n            </ProfileButton>\r\n        </BackgroundView>\r\n    )\r\n}\r\n\r\nexport default HomeScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { View} from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nconst BeenAwhileScreen = ({navigation, route}) => {\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>Been Awhile Since You Talked</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n           <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default BeenAwhileScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { View} from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nconst AddContactScreen = ({navigation, route}) => {\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>Add Contact</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n           <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default AddContactScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`\r\nexport const ButtonNextTab = styled.TouchableOpacity`\r\n    background-color: #A0F45B;\r\n    border: 1px;\r\n    flex: 1;\r\n    height: 50px; \r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TabText = styled.Text`\r\n    fontSize: 12px; \r\n    align-items: center;\r\n`","import React from 'react'\r\nimport { Platform, Text, View} from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\nconst MapElementComponent = Platform.select({  \r\n  web: () => require('../../services/ArcGIS/ArcGISMapWeb/arcgisweb.js').default, \r\n  ios: () => require('../../services/GoogleMap/GoogleMapIOS/googleios.js').default,\r\n  android: () => require('../../services/GoogleMap/GoogleMapAndroid/googleandroid.js').default,\r\n})();\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image,\r\n    ButtonNextTab,\r\n    TabText\r\n} from './styles'\r\n\r\nvar GetAllUsersTable = DBHandleInstance.GetAllUserRows();\r\n\r\nconst ProfileScreen = ({navigation, route}) => {\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>This is {name}'s profile</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n            <GetAllUsersTable />\r\n            <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Home', {})}>\r\n                <TabText>Home</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('BeenAwhile', {})}>\r\n                <TabText>Been Awhile</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('AddContact', {})}>\r\n                <TabText>Add Contact</TabText>\r\n              </ButtonNextTab>\r\n              <ButtonNextTab onPress={() => navigation.navigate('Profile', {})}>\r\n                <TabText>Profile</TabText>\r\n              </ButtonNextTab>\r\n            </View>\r\n      </BackgroundView>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileScreen","import React, { useContext } from 'react'\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from '../pages/Home'\r\nimport BeenAwhileScreen from '../pages/BeenAwhile'\r\nimport AddContactScreen from '../pages/AddContact'\r\nimport ProfileScreen from '../pages/Profile'\r\n\r\nimport { ThemeContext } from 'styled-components'\r\n\r\n// Initialize page navigation\r\nconst StackNavigator = createStackNavigator();\r\n\r\nexport default function Routes() {\r\n  const { colors } = useContext(ThemeContext)\r\n  return (\r\n      <StackNavigator.Navigator\r\n      initialRouteName=\"Home\"\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        header: () => null\r\n      }}\r\n    >\r\n      <StackNavigator.Screen\r\n            options={{\r\n                title: 'Home',\r\n              }}\r\n      component={HomeScreen} name=\"Home\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'BeenAwhile',\r\n              }}       \r\n      component={BeenAwhileScreen} name=\"BeenAwhile\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'AddContact',\r\n              }}             \r\n      component={AddContactScreen} name=\"AddContact\" />\r\n\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'Profile',\r\n              }}             \r\n      component={ProfileScreen} name=\"Profile\" />\r\n    </StackNavigator.Navigator>\r\n  )\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport DBHandleInstance from './src/persistence/DBHandler'\nimport AppProvider from './src/hooks';\nimport Routes from './src/routes';\n\n// Initialize DB once\nvar InitDBFunc = DBHandleInstance.InitAllDB;\nInitDBFunc();\n\n\n\nexport default class App extends React.Component {\n  render() {\n    return (\n    <NavigationContainer>\n      <StatusBar style=\"auto\" />\n      <AppProvider>\n        <Routes />\n      </AppProvider>\n    </NavigationContainer> \n    );\n  }\n}","import React from 'react';\r\nimport { Dimensions } from 'react-native';\r\nimport { Map } from '@esri/react-arcgis';\r\n\r\nclass ArcGISMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n        var {\r\n            width,\r\n            height\r\n          } = Dimensions.get('window');\r\n\r\n      return (\r\n        <Map style={{maxHeight: height - (height*.5), maxWidth: width-120}}/>\r\n      );\r\n    }\r\n  };\r\n  \r\n  export default ArcGISMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { StyleSheet, View, Dimensions } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n      var {\r\n        width,\r\n        height\r\n      } = Dimensions.get('window');\r\n\r\n      return (\r\n        <View>\r\n          <MapView style={{height: height - (height*.75), width: width-120}}     \r\n          initialRegion={{\r\n            latitude: 37.78825,\r\n            longitude: -122.4324,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}/>\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { StyleSheet, View, Dimensions } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n      var {\r\n        width,\r\n        height\r\n      } = Dimensions.get('window');\r\n\r\n      return (\r\n        <View>\r\n          <MapView style={{height: height - (height*.75), width: width-120}}     \r\n          initialRegion={{\r\n            latitude: 37.78825,\r\n            longitude: -122.4324,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}/>\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap","module.exports = __webpack_public_path__ + \"static/media/WorldMap.e02fb1bf.png\";"],"sourceRoot":""}