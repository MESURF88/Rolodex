{"version":3,"sources":["src/assets/WorldMap/WorldMap.png","src/persistence/DBHandler/styles.ts","src/persistence/DBHandler/index.tsx","src/styles/themes/ikindalikeyou.ts","src/hooks/theme.tsx","src/hooks/index.tsx","src/pages/Home/styles.ts","src/pages/Home/index.tsx","src/pages/Profile/styles.ts","src/pages/Profile/index.tsx","src/routes/index.tsx","App.tsx","src/services/ArcGIS/ArcGISMapWeb/arcgisweb.js","src/services/GoogleMap/GoogleMapIOS/googleios.js","src/services/GoogleMap/GoogleMapAndroid/googleandroid.js"],"names":["module","exports","RowElement","styled","SafeAreaView","Text","TitleText","db","dbref","firebaseConfig","apiKey","API_KEY","authDomain","projectId","storageBucket","messagingSenderId","MESSAGE_SENDER_ID","appId","APP_ID","firebaseSnapshotToArray","snapshot","returnArr","forEach","childSnapshot","val","push","a","async","tableBuild","recvR","keyIdx","i","length","View","key","style","flex","alignSelf","flexDirection","padding","backgroundColor","borderWidth","color","first_name","age","GetAllUsersTable","state","recvRawRows","rowsFormatted","rowNumber","readError","writeError","componentDidMount","Platform","OS","get","then","exists","setState","error","message","transaction","trans","executeSql","_","_array","rows","console","log","getRows","getRowNumber","id","Dimensions","width","height","contactstring","this","maxHeight","minWidth","alignItems","justifyContent","fontWeight","React","Component","expoSQLite","DBHandleInstance","firebase","initializeApp","fdb","database","ref","testObj","argString","Object","keys","arrValues","tempArr","tempLength","len","values","j","String","results","rowsAffected","title","colors","primary","background","switcherBackground","text","tabBarActiveBackgroundColor","tabBarIconInactiveColor","inputBackground","inputTextColor","inputIconFill","inputIconNotFill","inputFocusBorderColor","ThemeContext","createContext","ThemeProvider","children","deviceTheme","Appearance","getColorScheme","useState","ikindalikeyou","theme","setTheme","persistTheme","useCallback","themeToPersist","useEffect","toggleTheme","Provider","value","AppProvider","BackgroundView","ProfileButton","TouchableOpacity","HomeScreen","navigation","route","onPress","navigate","name","Image","MapElementComponent","select","web","require","default","ios","android","GetAllUserRows","ProfileScreen","params","source","MapImg","maxWidth","StackNavigator","createStackNavigator","Routes","useContext","Navigator","initialRouteName","screenOptions","headerStyle","header","Screen","options","component","InitDBFunc","InitAllDB","App","NavigationContainer","StatusBar","ArcGISMap","props","GoogleAppMap","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta"],"mappings":"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","file":"static/js/app.c961ec0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WorldMap.e02fb1bf.png\";","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #D6FF84;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const RowElement = styled.Text`\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 40px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n`","import React from 'react';\r\nimport { Platform, View, Text, Dimensions, TouchableOpacity } from 'react-native';\r\nimport axios from 'axios';\r\nimport { maybeCompleteAuthSession } from 'expo-web-browser';\r\nimport Schema from './schema'\r\nimport * as expoSQLite from 'expo-sqlite';\r\n// @ts-ignore \r\nimport { API_KEY, APP_ID, MESSAGE_SENDER_ID, ISSUER, CLIENT_ID, CLIENT_SECRET, SCOPE, CLIENT_ID_APP, DOMAIN_APP } from '@env';\r\nimport firebase from 'firebase/app'\r\nimport \"firebase/database\";\r\n\r\n// NOTE: USE FIREBASE for WEB\r\n\r\nimport {\r\n    TitleText,\r\n    RowElement,\r\n} from './styles'\r\n\r\n// Initialize Firebase local only\r\nconst firebaseConfig = {\r\n        apiKey: {API_KEY},\r\n        authDomain: \"rolodex-hillkevin.firebaseapp.com\",\r\n        projectId: \"rolodex-hillkevin\",\r\n        storageBucket: \"rolodex-hillkevin.appspot.com\",\r\n        messagingSenderId: {MESSAGE_SENDER_ID},\r\n        appId: {APP_ID}\r\n};\r\n\r\n// Declare general db local only\r\nvar db;\r\n\r\n// Declare web db local only\r\nvar dbref;\r\n\r\n// Web db generate array of key values\r\nconst firebaseSnapshotToArray = function(snapshot) {\r\n    var returnArr = [];\r\n\r\n    snapshot.forEach(function(childSnapshot) {\r\n        if (childSnapshot.val() !== null) {\r\n            returnArr.push(childSnapshot.val());\r\n        }\r\n    });\r\n\r\n    return returnArr;\r\n};\r\n\r\nconst url_post = `${ISSUER}/v1/token`\r\nconst config = {\r\n    headers: {'accept': 'application/json', 'content-type': 'application/json;charset=UTF-8' },\r\n    auth: {\r\n      username: CLIENT_ID,\r\n      password: CLIENT_SECRET\r\n    },\r\n    params: {\r\n      grant_type: 'client_credentials',\r\n      scope: SCOPE\r\n    },\r\n    data: {}\r\n}\r\n\r\nconst url = \"http://localhost:8080/linearData\";\r\nconst sendAPIRequest = async () => {\r\n    try {\r\n\r\n   /*         \r\n        axios.post(url_post, config)\r\n        .then(response => {\r\n            console.log('getting data from axios', response.data);\r\n            setTimeout(() => {\r\n                console.log(response.data);\r\n            }, 2000)\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n        });\r\n\r\n\r\n      const auth = await axios({\r\n        url: `${ISSUER}/v1/token`,\r\n        method: 'post',\r\n        headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n        auth: {\r\n          username: CLIENT_ID,\r\n          password: CLIENT_SECRET\r\n        },\r\n        params: {\r\n          grant_type: 'client_credentials',\r\n          scope: SCOPE\r\n        },\r\n        data: {}\r\n      })\r\n\r\n      const response = await axios({\r\n        url,\r\n        method: 'get',\r\n        data: null,\r\n        headers: {\r\n          authorization: `${auth.data.token_type} ${auth.data.access_token}`\r\n        }\r\n      })\r\n  */\r\n\r\n    } catch (error) {\r\n      console.log(`Error: ${error.message}`)\r\n    }\r\n  }\r\n  // TODO: remove\r\n  sendAPIRequest();\r\n\r\n// Build the Table view Element\r\nconst tableBuild = function(recvR) {\r\n    var returnArr = [];\r\n\r\n    let keyIdx = 0;\r\n    for (var i = 0; i < recvR.length; i++) {\r\n        returnArr.push(\r\n        <View key={keyIdx} style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row', padding: 1}}>\r\n            <View key={keyIdx+1} style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#F1ED70\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{recvR[i].first_name}</Text></View>\r\n            <View key={keyIdx+2} style={{ flex: 1, alignSelf: 'stretch',    backgroundColor: \"#F1ED70\",\r\n            borderWidth: 5, }}><Text style={{ color: 'black' }}>{recvR[i].age}</Text></View>\r\n        </View>\r\n        )\r\n        keyIdx = i + 3;\r\n    }\r\n \r\n    return returnArr;\r\n};\r\n\r\n\r\n// sqlite db generate array of key values\r\nconst sqliteRowsToArray = function(recvR) {\r\n    var returnArr = [];\r\n\r\n    returnArr = recvR;\r\n \r\n    return returnArr;\r\n};\r\n\r\nclass GetAllUsersTable extends React.Component {\r\n    state = {\r\n        recvRawRows: [],\r\n        rowsFormatted: [],\r\n        rowNumber: 0,\r\n        readError: null,\r\n        writeError: null\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n      var returnArr = [];\r\n      if (Platform.OS === \"web\") {\r\n        try {\r\n            dbref.get().then((snapshot) => {\r\n            // On success parse data\r\n            if (snapshot.exists()) {\r\n            \r\n                returnArr = firebaseSnapshotToArray(snapshot);\r\n\r\n                if (returnArr !== null && returnArr.length !== 0) {\r\n                    this.setState({ rowNumber: returnArr.length});\r\n                }\r\n\r\n                this.setState({ rowsFormatted: tableBuild(returnArr) });\r\n\r\n            }\r\n            });\r\n        } catch (error) {\r\n            this.setState({ readError: error.message });\r\n        }\r\n      }\r\n      else {\r\n        try {\r\n\r\n            db.transaction(trans=>{\r\n\r\n                trans.executeSql(\r\n\r\n                    'SELECT * FROM items ORDER BY ROWID ASC',\r\n                    [],\r\n                    (_, { rows: { _array } })  => this.setState({ recvRawRows: _array }),\r\n\r\n                )\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Error while opening Database \");\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Database successfully retrieved\");\r\n                // On success parse data\r\n                if (this.state.recvRawRows !== null && this.state.recvRawRows.length !== 0) {\r\n                    returnArr = sqliteRowsToArray(this.state.recvRawRows);\r\n                    this.setState({ rowNumber: this.state.recvRawRows.length});\r\n                }\r\n\r\n                this.setState({ rowsFormatted: tableBuild(returnArr) });\r\n\r\n                }\r\n\r\n            );\r\n\r\n        } catch (error) {\r\n            this.setState({ readError: error.message });\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    getRows= () => {\r\n        return this.state.rowsFormatted;\r\n    }\r\n\r\n    getRowNumber= () => {\r\n        return this.state.rowNumber;\r\n    }\r\n\r\n    id = 0;\r\n    render() {\r\n        var {\r\n            width,\r\n            height\r\n          } = Dimensions.get('window');\r\n        var contactstring = (this.getRowNumber() === 1) ? \"Contact\" : \"Contacts\";\r\n\r\n        return (\r\n        <RowElement key={this.id} style={{maxHeight: height - (height*.65) }}>\r\n            <View style={{ minWidth: width-20, alignItems: 'center', justifyContent: 'center' }}>\r\n                <View style={{ alignItems: 'center', justifyContent: 'center',  flexDirection: 'row' }}>\r\n                    <View style={{ flex: 1, borderWidth: 5  }}>\r\n                        <TitleText >You Have {this.getRowNumber()} {contactstring} </TitleText>\r\n                    </View>\r\n                </View>\r\n                <View style={{ flex: 1, alignSelf: 'stretch', flexDirection: 'row' }}>\r\n                    <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 5 }}> \r\n                        <Text style={{ fontWeight: 'bold' }}>Name</Text>\r\n                    </View>\r\n                    <View style={{ flex: 1, alignSelf: 'stretch',  borderWidth: 5}}>\r\n                        <Text style={{ fontWeight: 'bold' }}>Age</Text>\r\n                    </View>\r\n                </View>\r\n                {this.getRows()}\r\n            </View>\r\n        </RowElement>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nclass DBHandle {\r\n\r\n    // Initialize database on new instance, NOTE: Only one instance of this class shall be created in the current .tsx file    \r\n    #openDatabase() {\r\n        if (Platform.OS === \"web\") {\r\n            console.log(\"web\");\r\n                return {\r\n                transaction: () => {\r\n                    return {\r\n                    executeSql: () => {},\r\n                    };\r\n                },\r\n            };\r\n        }\r\n        else{\r\n            const db = expoSQLite.openDatabase(\"db.db\");\r\n            return db;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        // Open database method (private) and web uses firebase RTDB, app uses sqlite\r\n        db = this.#openDatabase();\r\n    }\r\n\r\n    InitAllDB() {\r\n        console.log(\"Initializing database...\");\r\n        if (Platform.OS === \"web\") {\r\n\r\n            firebase.initializeApp(firebaseConfig);\r\n            const fdb = firebase.database();\r\n            dbref = fdb.ref('users');\r\n\r\n        }\r\n        else {\r\n\r\n            // Filling in sample data for offline sqlite database\r\n            try {\r\n                // TODO: move this GET request api that can be accessed only from this app (api will call firebase and return array of values adn 2 length values rownum and columnum to update sqlite)\r\n                /*var argString = \"\";\r\n                var arrValues = []; \r\n                sendAPIRequest().then(apiData => {\r\n                    for (let i = 0; i < apiData.rowNum; i++) {\r\n                        argString += \"(\";\r\n                        for (let j = 0; j < apiData.columnNum; j++) {\r\n                            argString += ((j < (apiData.columnNum-1))? \"?,\" : \"?\");\r\n                        }\r\n                        argString += ((i < (apiData.rowNum-1))? \"),\" : \")\");\r\n                    }\r\n                    arrValues = apiData.linearDat;\r\n                });\r\n                */\r\n               \r\n                let testObj =  [ {\r\n                      \"first_name\" : \"Kevin\",\r\n                      \"age\" : \"26\"\r\n                    }, {\r\n                      \"first_name\" : \"Joe\",\r\n                      \"age\" : \"58\"\r\n                    } ]\r\n                  \r\n                let keys = Object.keys(testObj[0]);\r\n                let argString = \"\";\r\n                let arrValues = [];\r\n                let tempArr = [];\r\n                let tempLength = 0;\r\n\r\n                let len = testObj.length;\r\n                \r\n                for (let i = 0; i < len; i++) {\r\n                    argString += \"(\";\r\n                    tempArr = Object.values(testObj[i]);\r\n                    tempLength = tempArr.length;\r\n                    for (let j = 0; j < tempLength; j++) {\r\n                        argString += ((j < (tempLength-1))? \"?,\" : \"?\");\r\n                        arrValues.push(tempArr[j]);\r\n                    }\r\n                    argString += ((i < (len-1))? \"),\" : \")\");\r\n                }\r\n\r\n                db.transaction(trans=>{\r\n\r\n                trans.executeSql(\r\n\r\n                    'DROP TABLE IF EXISTS items'\r\n                    \r\n                )\r\n\r\n                trans.executeSql(\r\n\r\n                    'CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY AUTOINCREMENT, first_name TEXT, age TEXT)'\r\n                    \r\n                )\r\n\r\n                trans.executeSql(\r\n\r\n                    'INSERT INTO items (first_name, age) values '+ String(argString), arrValues,\r\n                    (trans, results) => {               \r\n                        if (results.rowsAffected > 0 ) {\r\n                            console.log('Insert success');              \r\n                        } else {\r\n                            console.log('Insert failed');\r\n                        }\r\n                    }\r\n\r\n                )\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Error while opening Database \");\r\n\r\n                },\r\n\r\n                ()=>{\r\n\r\n                console.log(\"Database successfully created\");\r\n\r\n                }\r\n\r\n                );\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"Error! \",error);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Get items of firebase db or sqlite db\r\n    GetAllUserRows() {\r\n        return GetAllUsersTable;\r\n    }\r\n}\r\n\r\nconst DBHandleInstance = new DBHandle();\r\n\r\nexport default DBHandleInstance","export default {\r\n  title: 'ikindalikeyou',\r\n\r\n  colors: {\r\n    primary: '#EEAF55',\r\n\r\n    background: '#A0F45B',\r\n    switcherBackground: '#d6d6d6',\r\n    text: '#0d0d0d',\r\n\r\n    tabBarActiveBackgroundColor: '#ebebeb',\r\n    tabBarIconInactiveColor: '#2c2c2c',\r\n\r\n    inputBackground: '#c6c6c6',\r\n    inputTextColor: '#0d0d0d',\r\n    inputIconFill: '#000000',\r\n    inputIconNotFill: '#666666',\r\n    inputFocusBorderColor: '#3a3836',\r\n  },\r\n}\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\n\r\nimport { Appearance } from 'react-native'\r\nimport { ThemeProvider as StyledProvider } from 'styled-components'\r\nimport ikindalikeyou from '../styles/themes/ikindalikeyou'\r\n\r\ninterface ThemeContextData {\r\n  toggleTheme(): void\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextData>({} as ThemeContextData)\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => {\r\n  const deviceTheme = Appearance.getColorScheme()\r\n  const [theme, setTheme] = useState(ikindalikeyou)\r\n\r\n\r\n  const persistTheme = useCallback(async themeToPersist => {\r\n    setTheme(ikindalikeyou)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    persistTheme(deviceTheme)\r\n  }, [deviceTheme, persistTheme])\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    persistTheme('ikindalikeyou')\r\n  }, [theme.title, persistTheme])\r\n\r\n  return (\r\n    <StyledProvider theme={theme}>\r\n      <ThemeContext.Provider value={{ toggleTheme }}>\r\n        {children}\r\n      </ThemeContext.Provider>\r\n    </StyledProvider>\r\n  )\r\n}\r\n\r\nfunction useTheme(): ThemeContextData {\r\n  const context = useContext(ThemeContext)\r\n\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport { ThemeProvider, useTheme }\r\n","import React from 'react'\r\n\r\nimport { ThemeProvider } from './theme'\r\n\r\nconst AppProvider: React.FC = ({ children }: any) => (\r\n  <ThemeProvider>{children}</ThemeProvider>\r\n)\r\n\r\nexport default AppProvider\r\n","import styled from 'styled-components/native'\r\n\r\n/*export const Container = styled.SafeAreaView`\r\n  background: ${props => props.theme.colors.background};\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n*/\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const ProfileButton = styled.TouchableOpacity`\r\n    alignItems: center;\r\n    background-color: #DDDDDD;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n`","import React from 'react'\r\nimport { Text } from 'react-native'\r\n\r\nimport {\r\n    BackgroundView,\r\n    ProfileButton,\r\n} from './styles'\r\n\r\nconst HomeScreen = ({navigation, route}) => {\r\n    return (\r\n        <BackgroundView>\r\n            <Text>Welcome to Rolodex</Text>\r\n            <ProfileButton onPress={() => navigation.navigate('Profile', {name: 'Kevin'} )}>\r\n                <Text>Go to Kevin's profile</Text>\r\n            </ProfileButton>\r\n        </BackgroundView>\r\n    )\r\n}\r\n\r\nexport default HomeScreen","import styled from 'styled-components/native'\r\n\r\nexport const BackgroundView = styled.SafeAreaView`\r\n    background-color: #F5AD44;\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const TitleText = styled.Text`\r\n    max-height: 30px;\r\n    background-color: #A0F45B;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nexport const Image = styled.Image`\r\n    width: 300px; \r\n    height: 300px; \r\n    padding: 10px;\r\n`","import React from 'react'\r\nimport { Platform, Dimensions } from 'react-native';\r\n// @ts-ignore \r\nimport MapImg from '../../assets/WorldMap/WorldMap.png'\r\nimport DBHandleInstance from '../../persistence/DBHandler'\r\nconst MapElementComponent = Platform.select({  \r\n  web: () => require('../../services/ArcGIS/ArcGISMapWeb/arcgisweb.js').default, \r\n  ios: () => require('../../services/GoogleMap/GoogleMapIOS/googleios.js').default,\r\n  android: () => require('../../services/GoogleMap/GoogleMapAndroid/googleandroid.js').default,\r\n})();\r\n\r\nimport {\r\n    BackgroundView,\r\n    TitleText,\r\n    Image\r\n} from './styles'\r\n\r\nvar GetAllUsersTable = DBHandleInstance.GetAllUserRows();\r\n\r\nconst ProfileScreen = ({navigation, route}) => {\r\n\r\n    const { name } = route.params;\r\n    return (\r\n      <BackgroundView>\r\n        <TitleText>This is {name}'s profile</TitleText>\r\n           <Image source={MapImg} style={{maxHeight:50, maxWidth: 50}}/>\r\n            <GetAllUsersTable />\r\n            <MapElementComponent />\r\n      </BackgroundView>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileScreen","import React, { useContext } from 'react'\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from '../pages/Home'\r\nimport ProfileScreen from '../pages/Profile'\r\n\r\nimport { ThemeContext } from 'styled-components'\r\n\r\n// Initialize page navigation\r\nconst StackNavigator = createStackNavigator();\r\n\r\nexport default function Routes() {\r\n  const { colors } = useContext(ThemeContext)\r\n  return (\r\n      <StackNavigator.Navigator\r\n      initialRouteName=\"Home\"\r\n      screenOptions={{\r\n        headerStyle: { backgroundColor: colors.background },\r\n        header: () => null\r\n      }}\r\n    >\r\n      <StackNavigator.Screen\r\n            options={{\r\n                title: 'Home',\r\n              }}\r\n      component={HomeScreen} name=\"Home\" />\r\n      <StackNavigator.Screen \r\n            options={{\r\n                title: 'Profile',\r\n              }}\r\n              \r\n      component={ProfileScreen} name=\"Profile\" />\r\n    </StackNavigator.Navigator>\r\n  )\r\n}","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport DBHandleInstance from './src/persistence/DBHandler'\nimport AppProvider from './src/hooks';\nimport Routes from './src/routes';\n\n// Initialize DB once\nvar InitDBFunc = DBHandleInstance.InitAllDB;\nInitDBFunc();\n\n\n\nexport default class App extends React.Component {\n  render() {\n    return (\n    <NavigationContainer>\n      <StatusBar style=\"auto\" />\n      <AppProvider>\n        <Routes />\n      </AppProvider>\n    </NavigationContainer> \n    );\n  }\n}","import React from 'react';\r\nimport { Dimensions } from 'react-native';\r\nimport { Map } from '@esri/react-arcgis';\r\n\r\nclass ArcGISMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n        var {\r\n            width,\r\n            height\r\n          } = Dimensions.get('window');\r\n\r\n      return (\r\n        <Map style={{maxHeight: height - (height*.5), maxWidth: width-120}}/>\r\n      );\r\n    }\r\n  };\r\n  \r\n  export default ArcGISMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { StyleSheet, View, Dimensions } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n      var {\r\n        width,\r\n        height\r\n      } = Dimensions.get('window');\r\n\r\n      return (\r\n        <View>\r\n          <MapView style={{height: height - (height*.75), width: width-120}}     \r\n          initialRegion={{\r\n            latitude: 37.78825,\r\n            longitude: -122.4324,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}/>\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap","import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { StyleSheet, View, Dimensions } from 'react-native';\r\n\r\nclass GoogleAppMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n    render() {\r\n      var {\r\n        width,\r\n        height\r\n      } = Dimensions.get('window');\r\n\r\n      return (\r\n        <View>\r\n          <MapView style={{height: height - (height*.75), width: width-120}}     \r\n          initialRegion={{\r\n            latitude: 37.78825,\r\n            longitude: -122.4324,\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n          }}/>\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\nexport default GoogleAppMap"],"sourceRoot":""}